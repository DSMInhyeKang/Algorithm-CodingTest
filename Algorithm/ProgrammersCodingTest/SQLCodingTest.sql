-- 특정 형질을 가지는 대장균 찾기(301646) - Lv.1
SELECT COUNT(ID) AS COUNT
FROM ECOLI_DATA
WHERE !(GENOTYPE & 2) AND (GENOTYPE & 1 OR GENOTYPE & 4);  -- 비트 연산 시 3번째 형질을 나타내는 비트는 100(2), 4(10)임에 유의



-- 가장 큰 물고기 10마리 구하기(298517) - Lv.1
SELECT ID, LENGTH
FROM FISH_INFO
WHERE LENGTH IS NOT NULL
ORDER BY LENGTH DESC, ID
LIMIT 10;



-- 한 해에 잡은 물고기 수 구하기(298516) - Lv.1
SELECT COUNT(ID) AS FISH_COUNT
FROM FISH_INFO
WHERE DATE_FORMAT(TIME, '%Y') = 2021;



-- 잡은 물고기 중 가장 큰 물고기의 길이 구하기(298515) - Lv.1
SELECT CONCAT(MAX(LENGTH), 'cm') AS MAX_LENGTH
FROM FISH_INFO;



-- 잡은 물고기의 평균 길이 구하기(293259) - Lv.1
SELECT ROUND(AVG(IFNULL(LENGTH, 10)), 2) AS AVERAGE_LENGTH
FROM FISH_INFO;



-- 잔챙이 잡은 수 구하기(293258) - Lv.1
SELECT COUNT(ID) AS FISH_COUNT 
FROM FISH_INFO
WHERE LENGTH IS NULL;



-- Python 개발자 찾기(276013) - Lv.1
SELECT ID, EMAIL, FIRST_NAME, LAST_NAME
FROM DEVELOPER_INFOS
WHERE 'Python' IN (SKILL_1, SKILL_2, SKILL_3)  -- WHERE SKILL_1 LIKE'%Python%' OR SKILL_2 LIKE '%Python%' OR SKILL_3 LIKE '%Python%'
ORDER BY ID ASC;



-- 조건에 부합하는 중고거래 댓글 조회하기(164673) - Lv.1
SELECT B.TITLE, B.BOARD_ID, R.REPLY_ID, R.WRITER_ID, R.CONTENTS, DATE_FORMAT(R.CREATED_DATE, '%Y-%m-%d') AS CREATED_DATE
FROM USED_GOODS_BOARD AS B JOIN USED_GOODS_REPLY AS R ON B.BOARD_ID = R.BOARD_ID  -- 원래 JOIN이 INNER JOIN과 동의어로 쓰이지만, 여기서는 테이블 간 같은 칼럼명이 여러 개므로 ON으로 지정해야 함
WHERE B.CREATED_DATE BETWEEN '2022-10-01' AND '2022-10-31'
ORDER BY R.CREATED_DATE, B.TITLE



-- 특정 옵션이 포함된 자동차 리스트 구하기(157343) - Lv.1
SELECT *
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%네비게이션%'
ORDER BY CAR_ID DESC;



-- 자동차 대여 기록에서 장기/단기 대여 구분하기(151138) - Lv.1
SELECT HISTORY_ID, CAR_ID, DATE_FORMAT(START_DATE, '%Y-%m-%d') AS START_DATE, DATE_FORMAT(END_DATE, '%Y-%m-%d') AS END_DATE, IF(DATEDIFF(END_DATE, START_DATE) < 29, '단기 대여', '장기 대여') AS RENT_TYPE  -- IF == CASE WHEN THEN ELSE END
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
WHERE DATE_FORMAT(START_DATE, '%Y-%m') = '2022-09'  -- WHERE START_DATE LIKE '2022-09-%'
ORDER BY HISTORY_ID DESC;



-- 평균 일일 대여 요금 구하기(151136) - Lv.1
SELECT ROUND(AVG(DAILY_FEE), 0) AS AVERAGE_FEE
FROM CAR_RENTAL_COMPANY_CAR
WHERE CAR_TYPE = 'SUV';



-- 조건에 맞는 도서 리스트 출력하기(144853) - Lv.1
SELECT BOOK_ID, DATE_FORMAT(PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK
WHERE CATEGORY = '인문' AND PUBLISHED_DATE LIKE '2021-%';



-- 부모의 형질을 모두 가지는 대장균 찾기(301647) - Lv.2
SELECT A.ID, A.GENOTYPE, B.GENOTYPE AS PARENT_GENOTYPE
FROM ECOLI_DATA AS A, ECOLI_DATA AS B
WHERE A.PARENT_ID = B.ID AND B.GENOTYPE & A.GENOTYPE = B.GENOTYPE
ORDER BY ID;



-- 분기별 분화된 대장균의 개체 수 구하기(299308) - Lv.2
SELECT CONCAT(QUARTER(DIFFERENTIATION_DATE), 'Q') AS QUARTER, COUNT(ID) AS ECOLI_COUNT
FROM ECOLI_DATA
GROUP BY QUARTER
ORDER BY QUARTER;



-- 과일로 만든 아이스크림 고르기(133025) - Lv.1
SELECT F.FLAVOR
FROM FIRST_HALF AS F, ICECREAM_INFO AS I
WHERE F.FLAVOR = I.FLAVOR AND F.TOTAL_ORDER > 3000 AND I.INGREDIENT_TYPE = 'fruit_based'
ORDER BY F.TOTAL_ORDER DESC;



-- 인기있는 아이스크림(133024) - Lv.1
SELECT FLAVOR
FROM FIRST_HALF
ORDER BY TOTAL_ORDER DESC, SHIPMENT_ID;



-- 흉부외과 또는 일반외과 의사 목록 출력하기(132203) - Lv.1
SELECT DR_NAME, DR_ID, MCDP_CD, DATE_FORMAT(HIRE_YMD, '%Y-%m-%d') AS HIRE_YMD
FROM DOCTOR
WHERE MCDP_CD = 'CS' OR MCDP_CD = 'GS'
ORDER BY HIRE_YMD DESC, DR_NAME;



-- 연도별 대장균 크기의 편차 구하기(299310) - Lv.2
WITH MAX_SIZE_OF_COLONY AS (
    SELECT MAX(SIZE_OF_COLONY) MAX_SIZE, YEAR(DIFFERENTIATION_DATE) YEAR 
    FROM ECOLI_DATA 
    GROUP BY YEAR
)

SELECT MS.YEAR, (MS.MAX_SIZE - ED.SIZE_OF_COLONY) YEAR_DEV, ED.ID 
FROM MAX_SIZE_OF_COLONY MS, ECOLI_DATA ED
WHERE YEAR(DIFFERENTIATION_DATE) = MS.YEAR
ORDER BY MS.YEAR, YEAR_DEV;



-- 월별 잡은 물고기 수 구하기(293260) - Lv.2
SELECT COUNT(ID) AS FISH_COUNT, MONTH(TIME) AS MONTH
FROM FISH_INFO
GROUP BY MONTH
ORDER BY MONTH;



-- 특정 물고기를 잡은 총 수 구하기(298518) - Lv.2
SELECT count(*) AS FISH_COUNT
FROM FISH_INFO AS F,FISH_NAME_INFO AS N
WHERE F.FISH_TYPE = N.FISH_TYPE AND N.FISH_NAME in ('BASS', 'SNAPPER');



-- 물고기 종류 별 잡은 수 구하기(293257) - Lv.2
SELECT COUNT(*) AS FISH_COUNT, N.FISH_NAME
FROM FISH_NAME_INFO AS N, FISH_INFO AS I
WHERE N.FISH_TYPE = I.FISH_TYPE
GROUP BY N.FISH_NAME
ORDER BY FISH_COUNT DESC;



-- 노선별 평균 역 사이 거리 조회하기(284531) - Lv.2
SELECT ROUTE, CONCAT(ROUND(SUM(D_BETWEEN_DIST), 1),'km') AS TOTAL_DISTANCE, CONCAT(ROUND(AVG(D_BETWEEN_DIST), 2), 'km') AS AVERAGE_DISTANCE
FROM SUBWAY_DISTANCE
GROUP BY ROUTE
ORDER BY ROUND(SUM(D_BETWEEN_DIST)) DESC;



-- 연도 별 평균 미세먼지 농도 조회하기(284530) - Lv.2
SELECT YEAR(YM) AS YEAR, ROUND(AVG(PM_VAL1),2) AS PM10, ROUND(AVG(PM_VAL2),2) AS 'PM2.5'
FROM AIR_POLLUTION
GROUP BY YEAR, LOCATION1, LOCATION2 HAVING LOCATION2 = '수원'
ORDER BY YEAR;



-- 조건에 맞는 사원 정보 조회하기(284527) - Lv.2
SELECT SUM(SCORE) AS SCORE, G.EMP_NO, E.EMP_NAME, E.POSITION, E.EMAIL
FROM HR_EMPLOYEES AS E, HR_GRADE AS G
WHERE E.EMP_NO = G.EMP_NO
GROUP BY YEAR, EMP_NO HAVING G.YEAR = '2022'
ORDER BY 1 DESC
LIMIT 1;



-- 조건에 맞는 개발자 찾기(276034) - Lv.2
SELECT ID, EMAIL, FIRST_NAME, LAST_NAME
FROM DEVELOPERS
WHERE SKILL_CODE & (SELECT CODE FROM SKILLCODES WHERE NAME='Python') OR SKILL_CODE & (SELECT CODE FROM SKILLCODES WHERE NAME='C#')
ORDER BY ID;



-- 조건에 맞는 도서와 저자 리스트 출력하기(144854) - Lv.2
SELECT B.BOOK_ID, A.AUTHOR_NAME, DATE_FORMAT(B.PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK AS B, AUTHOR AS A
WHERE B.AUTHOR_ID = A.AUTHOR_ID AND B.CATEGORY = '경제'
ORDER BY PUBLISHED_DATE;



-- 대장균의 크기에 따라 분류하기 1(299307) - Lv.3
SELECT ID, CASE WHEN SIZE_OF_COLONY <= 100 THEN 'LOW' 
                WHEN SIZE_OF_COLONY > 1000 THEN 'HIGH'
                ELSE 'MEDIUM'
            END AS SIZE
FROM ECOLI_DATA
ORDER BY ID;



-- FrontEnd 개발자 찾기(276035) - Lv.4
SELECT DISTINCT ID, EMAIL, FIRST_NAME, LAST_NAME
FROM DEVELOPERS AS D
JOIN SKILLCODES AS S ON S.CODE & D.SKILL_CODE
WHERE S.CATEGORY = 'Front End'
ORDER BY ID ASC;



-- 상품 별 오프라인 매출 구하기(131533) - Lv.2
SELECT PRODUCT_CODE, SUM(PRICE * SALES_AMOUNT) AS SALES
FROM PRODUCT AS P
JOIN OFFLINE_SALE AS O ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY PRODUCT_CODE
ORDER BY SALES DESC, PRODUCT_CODE;